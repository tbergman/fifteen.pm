/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useContext, useEffect } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { draco } from 'drei'
import * as C from '../constants.js';
import { MaterialsContext } from '../MaterialsContext';
import { useObjectAlongTubeGeometry } from '../../../Common/Animations/SplineAnimator.js'
import { useAnimationSequence } from '../../../Common/Animations/AnimationSequence.js';

export default function Cat({ catwalk, offset, animationName, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, C.CAT, draco('/draco-gltf/'))
  const { polishedSpeckledMarbleTop: body, naiveGlass: clothing, naiveGlass: eyes } = useContext(MaterialsContext);
  useObjectAlongTubeGeometry({
    object: group.current,
    tubeGeometry: catwalk,
    offset: offset,
  })

  const { actions, mixer, setAnimationsHaveLoaded } = useAnimationSequence({ animationName })

  useEffect(() => {
    actions.current = {
      insideout: mixer.clipAction(animations[0], group.current),
      mate: mixer.clipAction(animations[1], group.current),
      roses: mixer.clipAction(animations[2], group.current),
    }
    setAnimationsHaveLoaded(true)
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])

  return (
    <group ref={group} {...props} dispose={null}>
      <group
        position={[-1, 0, 0]}
        rotation={[THREE.Math.degToRad(-90), THREE.Math.degToRad(-90), 0]}
      >
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          material={clothing}
          geometry={nodes.clothes.geometry}
          skeleton={nodes.clothes.skeleton}
        />
        <skinnedMesh
          material={body}
          geometry={nodes.Object_10001_Mesh_0001.geometry}
          skeleton={nodes.Object_10001_Mesh_0001.skeleton}
        />
        <skinnedMesh
          material={eyes}
          geometry={nodes.Object_11001_Mesh_1001.geometry}
          skeleton={nodes.Object_11001_Mesh_1001.skeleton}
        />
        <skinnedMesh
          material={eyes}
          geometry={nodes.Object_12001_Mesh_2001.geometry}
          skeleton={nodes.Object_12001_Mesh_2001.skeleton}
        />
        <skinnedMesh
          material={body}
          geometry={nodes.Object_14001_Mesh_4001.geometry}
          skeleton={nodes.Object_14001_Mesh_4001.skeleton}
        />
        <skinnedMesh
          material={body}
          geometry={nodes.Object_15001_Mesh_5001.geometry}
          skeleton={nodes.Object_15001_Mesh_5001.skeleton}
        />
      </group>
    </group>
  )
}
