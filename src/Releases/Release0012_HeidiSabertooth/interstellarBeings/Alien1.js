/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useContext, useEffect } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { draco } from 'drei'
import * as C from '../constants.js';
import { MaterialsContext } from '../MaterialsContext';
import { useObjectAlongTubeGeometry } from '../../../Common/Animations/SplineAnimator.js'
import { useAnimationSequence } from '../../../Common/Animations/AnimationSequence.js';
import { useAnimationFadeIn } from '../../../Common/Animations/FadeIns.js';

export default function Alien1({ actionName, catwalk, offset, animationName, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, C.ALIEN1, draco('/draco-gltf/'))
  const { foamGrip: body, naiveGlass: clothing, naiveGlass: eyelashes, naiveGlass: eyes } = useContext(MaterialsContext);
  useObjectAlongTubeGeometry({
    object: group.current,
    tubeGeometry: catwalk,
    offset: offset,
  })
  const { actions, mixer, setAnimationsHaveLoaded } = useAnimationSequence({ animationName })
  useAnimationFadeIn({ actions: actions.current, actionName })
  useEffect(() => {
    actions.current = {
      insideout1: mixer.clipAction(animations[0], group.current),
      insideout2: mixer.clipAction(animations[1], group.current),
      insideout3: mixer.clipAction(animations[2], group.current),
      insideout4: mixer.clipAction(animations[3], group.current),
      mate1: mixer.clipAction(animations[4], group.current),
      mate2: mixer.clipAction(animations[5], group.current),
      roses1: mixer.clipAction(animations[6], group.current),
      roses2: mixer.clipAction(animations[7], group.current),
      roses3: mixer.clipAction(animations[8], group.current),
      roses4: mixer.clipAction(animations[9], group.current),
    }
    setAnimationsHaveLoaded(true)
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])
  return (
    <group ref={group} {...props} dispose={null}>
      <group
        position={[-1, 0, 0]}
        scale={[.01, .01, .01]}
        rotation={[THREE.Math.degToRad(0), THREE.Math.degToRad(-180), THREE.Math.degToRad(90)]}
      >
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          material={body}
          geometry={nodes.Body_Bodymesh.geometry}
          skeleton={nodes.Body_Bodymesh.skeleton}
        />
        <skinnedMesh
          material={clothing}
          geometry={nodes.Cylinder.geometry}
          skeleton={nodes.Cylinder.skeleton}
        />
        <skinnedMesh
          material={eyes}
          geometry={nodes.default_defaultmesh.geometry}
          skeleton={nodes.default_defaultmesh.skeleton}
        />
        <skinnedMesh
          material={eyelashes}
          geometry={nodes.Eyelashes_Eyelashesmesh.geometry}
          skeleton={nodes.Eyelashes_Eyelashesmesh.skeleton}
        />
      </group>
    </group>
  )
}
